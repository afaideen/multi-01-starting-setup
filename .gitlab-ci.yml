
stages:
  - setup
  - build
  - deploy

services:
  - docker:dind

variables:
  MONGODB_IMAGE: mongo
  BACKEND_IMAGE: goals-node
  FRONTEND_IMAGE: goals-react

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

setup:
  stage: setup
  script:
    - docker pull $MONGODB_IMAGE
#    - docker network ls | grep -q goals-net || docker network create goals-net
    # Check if the network exists
    - if [[ ! "$(docker network ls -q -f name=goals-net)" ]]; then docker network create goals-net; fi
#    - docker run --name mongodb -d --network goals-net $MONGODB_IMAGE
    - if [[ ! "$(docker ps -q -f name=mongodb)" ]]; then docker run --name mongodb -d --network goals-net $MONGODB_IMAGE; fi
    - docker pull afaideen/goals-node:latest
    - docker run --name goals-node --rm -d -p 80:80 afaideen/goals-node:latest
    - docker pull afaideen/goals-react:latest
    - docker run --name goals-react --rm -d -p 3000:3000 afaideen/goals-react:latest
  tags:
    - localshell
    - localrunner


build:
  image: docker:latest
  stage: build
  script:

#    - docker build -t $BACKEND_IMAGE -f ./backend/Dockerfile ./backend
#    - docker build -t $FRONTEND_IMAGE -f ./frontend/Dockerfile ./frontend
#    - docker push $BACKEND_IMAGE
#    - docker push $FRONTEND_IMAGE
    - echo "Building..."
  tags:
    - localshell
    - localrunner


deploy:
  image: docker:latest
  stage: deploy
  script:
    - echo "deploying..."
#    - docker-compose -f docker-compose.yml up -d
  environment:
    name: testing
  only:
    - master
  tags:
    - localshell
    - localrunner

